/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.paris.searcher;

import com.paris.searcher.pipeline.FolderSystemUtil;
import com.paris.searcher.pipeline.TextFileRepository;
import com.paris.searcher.pipeline.TextFileScheduler;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import junit.framework.TestCase;
import static org.junit.Assert.assertThrows;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.BlockJUnit4ClassRunner;

@RunWith(value = BlockJUnit4ClassRunner.class)
public class AppTest extends TestCase {
    FolderSystemUtil folderSystemUtil;
    String filePath;
    Properties myProps;
    List<String> files;
    List<String> invalidFiles;
    App application;

    @Before
    public void initialize() {
        folderSystemUtil = new FolderSystemUtil();
        filePath = "src/test/resources";
        myProps = new Properties();
        myProps.setProperty("threadCount","10");
        myProps.setProperty("resultCount","10");

        Path resourceDirectory = Paths.get("src","test","resources");
        String absolutePath = resourceDirectory.toFile().getAbsolutePath();
        files = new ArrayList<>();
        files.add(absolutePath.concat("/").concat("text1.txt"));
        files.add(absolutePath.concat("/").concat("text2.txt"));
        files.add(absolutePath.concat("/").concat("text3.txt"));
        files.add(absolutePath.concat("/more/").concat("text4.txt"));

        invalidFiles = new ArrayList<>();
        invalidFiles.add(absolutePath.concat("/").concat("invalid_text.txt"));

        application = new App();
    }

    @Test
    public void loadingTextFiles() {
        Path resourceDirectory = Paths.get("src","test","resources");
        String absolutePath = resourceDirectory.toFile().getAbsolutePath();
        List<String> fileNames = folderSystemUtil.process(filePath);
        assert(fileNames.contains(absolutePath.concat("/").concat("text1.txt")));
        assert(fileNames.contains(absolutePath.concat("/").concat("text2.txt")));
        assert(fileNames.contains(absolutePath.concat("/").concat("text3.txt")));
        assert(fileNames.contains(absolutePath.concat("/more/").concat("text4.txt")));
    }

    @Test
    public void textFileSchedulerWithValidFiles() {
        TextFileScheduler textFileScheduler = new TextFileScheduler(myProps);
        ConcurrentHashMap<String, TreeSet<String>> repository = textFileScheduler.process(files);
        assert(repository.keySet().size()==4);

        TextFileRepository textFileRepository = new TextFileRepository();
        textFileRepository.process(repository);
        assert(textFileRepository.get()==repository);
        assert(textFileRepository.size()==4);
    }

    @Test
    public void textFileSchedulerWithEmptyList() {
        TextFileScheduler textFileScheduler = new TextFileScheduler(myProps);
        ConcurrentHashMap<String, TreeSet<String>> repository = textFileScheduler.process(new ArrayList<>());
        assert(repository.keySet().size()==0);
    }

    @Test
    public void textFileSchedulerWithInvalidFiles() {
        TextFileScheduler textFileScheduler = new TextFileScheduler(myProps);
        ConcurrentHashMap<String, TreeSet<String>> repository = textFileScheduler.process(invalidFiles);
        assert(repository.keySet().size()==0);
    }

    @Test
    public void appThrowsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> {
            App.main(new String[0]);
        });
    }

    @Test
    public void appWithValidFiles() {
        String[] args = new String[1];
        args[0] = filePath;
        InputStream sysInBackup = System.in; // backup System.in to restore it later
        ByteArrayInputStream in = new ByteArrayInputStream("good morning".getBytes());
        System.setIn(in);
        System.setProperty("searcher.properties","");
        App.main(args);
        System.setIn(sysInBackup);
    }

    @Test
    public void appWithEmptyInput() {
        String[] args = new String[1];
        args[0] = filePath;
        InputStream sysInBackup = System.in; // backup System.in to restore it later
        ByteArrayInputStream in = new ByteArrayInputStream(" ".getBytes());
        System.setIn(in);
        System.setProperty("searcher.properties",filePath.concat("/").concat("app.properties"));
        App.main(args);
        System.setIn(sysInBackup);
    }
}
