/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.paris.searcher;

import com.paris.searcher.pipeline.FolderSystemUtil;
import com.paris.searcher.pipeline.Pipeline;
import com.paris.searcher.pipeline.TextFileRepository;
import com.paris.searcher.pipeline.TextFileScheduler;
import com.paris.searcher.processor.SearchScheduler;
import java.io.FileInputStream;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.Scanner;

//https://docs.gradle.org/current/samples/sample_building_java_applications.html
public class App {

    public static void main(String[] args) {

        //https://stackoverflow.com/questions/5124439/java-console-program-and-ctrl-c
        //https://stackoverflow.com/questions/2979383/how-to-clear-the-console
        Thread mainThread = Thread.currentThread();
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.out.println(".Bye!");
            mainThread.interrupt();
        }));

        // args examples
        // 0 . com.paris.searcher.App
        // 1 . /home/user/Documents
        if (args.length == 0) {
            throw new IllegalArgumentException("The MainClass and a Directory must be provided.");
        }
        String filePath = args[args.length-1];
        System.out.println("filePath: " + filePath);

        final Properties myProps = new Properties();
        String propPath = System.getProperty("searcher.properties");
        try (FileInputStream in = new FileInputStream(propPath)) {
            myProps.load(in);
        } catch(Exception e) {
            System.out.println("A valid searcher.properties file was not provided. Using default values.");
            myProps.setProperty("threadCount","10");
            myProps.setProperty("resultCount","10");
        }
        System.out.println("threadCount: " + myProps.getProperty("threadCount"));
        System.out.println("resultCount: " + myProps.getProperty("resultCount"));

        // STARTED READING TEXT FILES

        TextFileRepository textFileRepository = new TextFileRepository();
        var filters = new Pipeline<>(new FolderSystemUtil())
                .addHandler(new TextFileScheduler(myProps))
                .addHandler(textFileRepository);
        filters.execute(filePath);

        // FINISHED READING TEXT FILES

        SearchScheduler searchScheduler = new SearchScheduler(myProps,textFileRepository);

        //TODO: Index all files in indexableDirectory
        try (Scanner keyboard = new Scanner(System.in)) {
            while (true) {
                System.out.print("search> ");
                final String line = keyboard.nextLine().trim();
                if(line.equalsIgnoreCase(""))
                    break;
                searchScheduler.process(line);
            }
        } catch (NoSuchElementException ignored) {}
    }
}
